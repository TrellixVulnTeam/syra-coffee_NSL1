{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{NFeN:function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.d(__webpack_exports__,\"a\",function(){return MatIcon}),__webpack_require__.d(__webpack_exports__,\"b\",function(){return MatIconModule});var _angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(\"fXoL\"),_angular_material_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(\"FKr1\"),_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(\"8LU1\"),_angular_common__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(\"ofXK\"),rxjs__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(\"LRne\"),rxjs__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(\"z6cu\"),rxjs__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(\"cp0P\"),rxjs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(\"quSY\"),rxjs_operators__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(\"vkgz\"),rxjs_operators__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(\"lJxs\"),rxjs_operators__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(\"JIr8\"),rxjs_operators__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(\"nYR2\"),rxjs_operators__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(\"w1tV\"),rxjs_operators__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(\"IzEk\"),_angular_common_http__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(\"tk/3\"),_angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(\"jhN1\");const _c0=[\"*\"];function getMatIconNameNotFoundError(iconName){return Error(`Unable to find icon with the name \"${iconName}\"`)}function getMatIconFailedToSanitizeUrlError(url){return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL via Angular's DomSanitizer. Attempted URL was \"${url}\".`)}function getMatIconFailedToSanitizeLiteralError(literal){return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by Angular's DomSanitizer. Attempted literal was \"${literal}\".`)}class SvgIconConfig{constructor(url,svgText,options){this.url=url,this.svgText=svgText,this.options=options}}let MatIconRegistry=(()=>{class MatIconRegistry{constructor(_httpClient,_sanitizer,document,_errorHandler){this._httpClient=_httpClient,this._sanitizer=_sanitizer,this._errorHandler=_errorHandler,this._svgIconConfigs=new Map,this._iconSetConfigs=new Map,this._cachedIconsByUrl=new Map,this._inProgressUrlFetches=new Map,this._fontCssClassesByAlias=new Map,this._defaultFontSetClass=\"material-icons\",this._document=document}addSvgIcon(iconName,url,options){return this.addSvgIconInNamespace(\"\",iconName,url,options)}addSvgIconLiteral(iconName,literal,options){return this.addSvgIconLiteralInNamespace(\"\",iconName,literal,options)}addSvgIconInNamespace(namespace,iconName,url,options){return this._addSvgIconConfig(namespace,iconName,new SvgIconConfig(url,null,options))}addSvgIconLiteralInNamespace(namespace,iconName,literal,options){const cleanLiteral=this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.K.HTML,literal);if(!cleanLiteral)throw getMatIconFailedToSanitizeLiteralError(literal);return this._addSvgIconConfig(namespace,iconName,new SvgIconConfig(\"\",cleanLiteral,options))}addSvgIconSet(url,options){return this.addSvgIconSetInNamespace(\"\",url,options)}addSvgIconSetLiteral(literal,options){return this.addSvgIconSetLiteralInNamespace(\"\",literal,options)}addSvgIconSetInNamespace(namespace,url,options){return this._addSvgIconSetConfig(namespace,new SvgIconConfig(url,null,options))}addSvgIconSetLiteralInNamespace(namespace,literal,options){const cleanLiteral=this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.K.HTML,literal);if(!cleanLiteral)throw getMatIconFailedToSanitizeLiteralError(literal);return this._addSvgIconSetConfig(namespace,new SvgIconConfig(\"\",cleanLiteral,options))}registerFontClassAlias(alias,className=alias){return this._fontCssClassesByAlias.set(alias,className),this}classNameForFontAlias(alias){return this._fontCssClassesByAlias.get(alias)||alias}setDefaultFontSetClass(className){return this._defaultFontSetClass=className,this}getDefaultFontSetClass(){return this._defaultFontSetClass}getSvgIconFromUrl(safeUrl){const url=this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.K.RESOURCE_URL,safeUrl);if(!url)throw getMatIconFailedToSanitizeUrlError(safeUrl);const cachedIcon=this._cachedIconsByUrl.get(url);return cachedIcon?Object(rxjs__WEBPACK_IMPORTED_MODULE_4__.a)(cloneSvg(cachedIcon)):this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl,null)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.a)(svg=>this._cachedIconsByUrl.set(url,svg)),Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.a)(svg=>cloneSvg(svg)))}getNamedSvgIcon(name,namespace=\"\"){const key=iconKey(namespace,name),config=this._svgIconConfigs.get(key);if(config)return this._getSvgFromConfig(config);const iconSetConfigs=this._iconSetConfigs.get(namespace);return iconSetConfigs?this._getSvgFromIconSetConfigs(name,iconSetConfigs):Object(rxjs__WEBPACK_IMPORTED_MODULE_5__.a)(getMatIconNameNotFoundError(key))}ngOnDestroy(){this._svgIconConfigs.clear(),this._iconSetConfigs.clear(),this._cachedIconsByUrl.clear()}_getSvgFromConfig(config){return config.svgText?Object(rxjs__WEBPACK_IMPORTED_MODULE_4__.a)(cloneSvg(this._svgElementFromConfig(config))):this._loadSvgIconFromConfig(config).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.a)(svg=>cloneSvg(svg)))}_getSvgFromIconSetConfigs(name,iconSetConfigs){const namedIcon=this._extractIconWithNameFromAnySet(name,iconSetConfigs);if(namedIcon)return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__.a)(namedIcon);const iconSetFetchRequests=iconSetConfigs.filter(iconSetConfig=>!iconSetConfig.svgText).map(iconSetConfig=>this._loadSvgIconSetFromConfig(iconSetConfig).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.a)(err=>{const url=this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.K.RESOURCE_URL,iconSetConfig.url);return this._errorHandler.handleError(new Error(`Loading icon set URL: ${url} failed: ${err.message}`)),Object(rxjs__WEBPACK_IMPORTED_MODULE_4__.a)(null)})));return Object(rxjs__WEBPACK_IMPORTED_MODULE_6__.a)(iconSetFetchRequests).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.a)(()=>{const foundIcon=this._extractIconWithNameFromAnySet(name,iconSetConfigs);if(!foundIcon)throw getMatIconNameNotFoundError(name);return foundIcon}))}_extractIconWithNameFromAnySet(iconName,iconSetConfigs){for(let i=iconSetConfigs.length-1;i>=0;i--){const config=iconSetConfigs[i];if(config.svgText&&config.svgText.indexOf(iconName)>-1){const svg=this._svgElementFromConfig(config),foundIcon=this._extractSvgIconFromSet(svg,iconName,config.options);if(foundIcon)return foundIcon}}return null}_loadSvgIconFromConfig(config){return this._fetchIcon(config).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.a)(svgText=>config.svgText=svgText),Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.a)(()=>this._svgElementFromConfig(config)))}_loadSvgIconSetFromConfig(config){return config.svgText?Object(rxjs__WEBPACK_IMPORTED_MODULE_4__.a)(null):this._fetchIcon(config).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.a)(svgText=>config.svgText=svgText))}_extractSvgIconFromSet(iconSet,iconName,options){const iconSource=iconSet.querySelector(`[id=\"${iconName}\"]`);if(!iconSource)return null;const iconElement=iconSource.cloneNode(!0);if(iconElement.removeAttribute(\"id\"),\"svg\"===iconElement.nodeName.toLowerCase())return this._setSvgAttributes(iconElement,options);if(\"symbol\"===iconElement.nodeName.toLowerCase())return this._setSvgAttributes(this._toSvgElement(iconElement),options);const svg=this._svgElementFromString(\"<svg></svg>\");return svg.appendChild(iconElement),this._setSvgAttributes(svg,options)}_svgElementFromString(str){const div=this._document.createElement(\"DIV\");div.innerHTML=str;const svg=div.querySelector(\"svg\");if(!svg)throw Error(\"<svg> tag not found\");return svg}_toSvgElement(element){const svg=this._svgElementFromString(\"<svg></svg>\"),attributes=element.attributes;for(let i=0;i<attributes.length;i++){const{name:name,value:value}=attributes[i];\"id\"!==name&&svg.setAttribute(name,value)}for(let i=0;i<element.childNodes.length;i++)element.childNodes[i].nodeType===this._document.ELEMENT_NODE&&svg.appendChild(element.childNodes[i].cloneNode(!0));return svg}_setSvgAttributes(svg,options){return svg.setAttribute(\"fit\",\"\"),svg.setAttribute(\"height\",\"100%\"),svg.setAttribute(\"width\",\"100%\"),svg.setAttribute(\"preserveAspectRatio\",\"xMidYMid meet\"),svg.setAttribute(\"focusable\",\"false\"),options&&options.viewBox&&svg.setAttribute(\"viewBox\",options.viewBox),svg}_fetchIcon(iconConfig){var _a;const{url:safeUrl,options:options}=iconConfig,withCredentials=null!==(_a=null==options?void 0:options.withCredentials)&&void 0!==_a&&_a;if(!this._httpClient)throw Error(\"Could not find HttpClient provider for use with Angular Material icons. Please include the HttpClientModule from @angular/common/http in your app imports.\");if(null==safeUrl)throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);const url=this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.K.RESOURCE_URL,safeUrl);if(!url)throw getMatIconFailedToSanitizeUrlError(safeUrl);const inProgressFetch=this._inProgressUrlFetches.get(url);if(inProgressFetch)return inProgressFetch;const req=this._httpClient.get(url,{responseType:\"text\",withCredentials:withCredentials}).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.a)(()=>this._inProgressUrlFetches.delete(url)),Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.a)());return this._inProgressUrlFetches.set(url,req),req}_addSvgIconConfig(namespace,iconName,config){return this._svgIconConfigs.set(iconKey(namespace,iconName),config),this}_addSvgIconSetConfig(namespace,config){const configNamespace=this._iconSetConfigs.get(namespace);return configNamespace?configNamespace.push(config):this._iconSetConfigs.set(namespace,[config]),this}_svgElementFromConfig(config){if(!config.svgElement){const svg=this._svgElementFromString(config.svgText);this._setSvgAttributes(svg,config.options),config.svgElement=svg}return config.svgElement}}return MatIconRegistry.ɵfac=function(t){return new(t||MatIconRegistry)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.cc(_angular_common_http__WEBPACK_IMPORTED_MODULE_14__.a,8),_angular_core__WEBPACK_IMPORTED_MODULE_0__.cc(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__.b),_angular_core__WEBPACK_IMPORTED_MODULE_0__.cc(_angular_common__WEBPACK_IMPORTED_MODULE_3__.d,8),_angular_core__WEBPACK_IMPORTED_MODULE_0__.cc(_angular_core__WEBPACK_IMPORTED_MODULE_0__.n))},MatIconRegistry.ɵprov=Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__.Lb)({factory:function(){return new MatIconRegistry(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__.cc)(_angular_common_http__WEBPACK_IMPORTED_MODULE_14__.a,8),Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__.cc)(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__.b),Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__.cc)(_angular_common__WEBPACK_IMPORTED_MODULE_3__.d,8),Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__.cc)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.n))},token:MatIconRegistry,providedIn:\"root\"}),MatIconRegistry})();function cloneSvg(svg){return svg.cloneNode(!0)}function iconKey(namespace,name){return namespace+\":\"+name}class MatIconBase{constructor(_elementRef){this._elementRef=_elementRef}}const _MatIconMixinBase=Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_1__.u)(MatIconBase),MAT_ICON_LOCATION=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.s(\"mat-icon-location\",{providedIn:\"root\",factory:function(){const _document=Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__.X)(_angular_common__WEBPACK_IMPORTED_MODULE_3__.d),_location=_document?_document.location:null;return{getPathname:()=>_location?_location.pathname+_location.search:\"\"}}}),funcIriAttributes=[\"clip-path\",\"color-profile\",\"src\",\"cursor\",\"fill\",\"filter\",\"marker\",\"marker-start\",\"marker-mid\",\"marker-end\",\"mask\",\"stroke\"],funcIriAttributeSelector=funcIriAttributes.map(attr=>`[${attr}]`).join(\", \"),funcIriPattern=/^url\\(['\"]?#(.*?)['\"]?\\)$/;let MatIcon=(()=>{class MatIcon extends _MatIconMixinBase{constructor(elementRef,_iconRegistry,ariaHidden,_location,_errorHandler){super(elementRef),this._iconRegistry=_iconRegistry,this._location=_location,this._errorHandler=_errorHandler,this._inline=!1,this._currentIconFetch=rxjs__WEBPACK_IMPORTED_MODULE_7__.a.EMPTY,ariaHidden||elementRef.nativeElement.setAttribute(\"aria-hidden\",\"true\")}get inline(){return this._inline}set inline(inline){this._inline=Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__.c)(inline)}get svgIcon(){return this._svgIcon}set svgIcon(value){value!==this._svgIcon&&(value?this._updateSvgIcon(value):this._svgIcon&&this._clearSvgElement(),this._svgIcon=value)}get fontSet(){return this._fontSet}set fontSet(value){const newValue=this._cleanupFontValue(value);newValue!==this._fontSet&&(this._fontSet=newValue,this._updateFontIconClasses())}get fontIcon(){return this._fontIcon}set fontIcon(value){const newValue=this._cleanupFontValue(value);newValue!==this._fontIcon&&(this._fontIcon=newValue,this._updateFontIconClasses())}_splitIconName(iconName){if(!iconName)return[\"\",\"\"];const parts=iconName.split(\":\");switch(parts.length){case 1:return[\"\",parts[0]];case 2:return parts;default:throw Error(`Invalid icon name: \"${iconName}\"`)}}ngOnInit(){this._updateFontIconClasses()}ngAfterViewChecked(){const cachedElements=this._elementsWithExternalReferences;if(cachedElements&&cachedElements.size){const newPath=this._location.getPathname();newPath!==this._previousPath&&(this._previousPath=newPath,this._prependPathToReferences(newPath))}}ngOnDestroy(){this._currentIconFetch.unsubscribe(),this._elementsWithExternalReferences&&this._elementsWithExternalReferences.clear()}_usingFontIcon(){return!this.svgIcon}_setSvgElement(svg){this._clearSvgElement();const styleTags=svg.querySelectorAll(\"style\");for(let i=0;i<styleTags.length;i++)styleTags[i].textContent+=\" \";const path=this._location.getPathname();this._previousPath=path,this._cacheChildrenWithExternalReferences(svg),this._prependPathToReferences(path),this._elementRef.nativeElement.appendChild(svg)}_clearSvgElement(){const layoutElement=this._elementRef.nativeElement;let childCount=layoutElement.childNodes.length;for(this._elementsWithExternalReferences&&this._elementsWithExternalReferences.clear();childCount--;){const child=layoutElement.childNodes[childCount];1===child.nodeType&&\"svg\"!==child.nodeName.toLowerCase()||layoutElement.removeChild(child)}}_updateFontIconClasses(){if(!this._usingFontIcon())return;const elem=this._elementRef.nativeElement,fontSetClass=this.fontSet?this._iconRegistry.classNameForFontAlias(this.fontSet):this._iconRegistry.getDefaultFontSetClass();fontSetClass!=this._previousFontSetClass&&(this._previousFontSetClass&&elem.classList.remove(this._previousFontSetClass),fontSetClass&&elem.classList.add(fontSetClass),this._previousFontSetClass=fontSetClass),this.fontIcon!=this._previousFontIconClass&&(this._previousFontIconClass&&elem.classList.remove(this._previousFontIconClass),this.fontIcon&&elem.classList.add(this.fontIcon),this._previousFontIconClass=this.fontIcon)}_cleanupFontValue(value){return\"string\"==typeof value?value.trim().split(\" \")[0]:value}_prependPathToReferences(path){const elements=this._elementsWithExternalReferences;elements&&elements.forEach((attrs,element)=>{attrs.forEach(attr=>{element.setAttribute(attr.name,`url('${path}#${attr.value}')`)})})}_cacheChildrenWithExternalReferences(element){const elementsWithFuncIri=element.querySelectorAll(funcIriAttributeSelector),elements=this._elementsWithExternalReferences=this._elementsWithExternalReferences||new Map;for(let i=0;i<elementsWithFuncIri.length;i++)funcIriAttributes.forEach(attr=>{const elementWithReference=elementsWithFuncIri[i],value=elementWithReference.getAttribute(attr),match=value?value.match(funcIriPattern):null;if(match){let attributes=elements.get(elementWithReference);attributes||(attributes=[],elements.set(elementWithReference,attributes)),attributes.push({name:attr,value:match[1]})}})}_updateSvgIcon(rawName){if(this._svgNamespace=null,this._svgName=null,this._currentIconFetch.unsubscribe(),rawName){const[namespace,iconName]=this._splitIconName(rawName);namespace&&(this._svgNamespace=namespace),iconName&&(this._svgName=iconName),this._currentIconFetch=this._iconRegistry.getNamedSvgIcon(iconName,namespace).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.a)(1)).subscribe(svg=>this._setSvgElement(svg),err=>{this._errorHandler.handleError(new Error(`Error retrieving icon ${namespace}:${iconName}! ${err.message}`))})}}}return MatIcon.ɵfac=function(t){return new(t||MatIcon)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.Pb(_angular_core__WEBPACK_IMPORTED_MODULE_0__.l),_angular_core__WEBPACK_IMPORTED_MODULE_0__.Pb(MatIconRegistry),_angular_core__WEBPACK_IMPORTED_MODULE_0__.dc(\"aria-hidden\"),_angular_core__WEBPACK_IMPORTED_MODULE_0__.Pb(MAT_ICON_LOCATION),_angular_core__WEBPACK_IMPORTED_MODULE_0__.Pb(_angular_core__WEBPACK_IMPORTED_MODULE_0__.n))},MatIcon.ɵcmp=_angular_core__WEBPACK_IMPORTED_MODULE_0__.Jb({type:MatIcon,selectors:[[\"mat-icon\"]],hostAttrs:[\"role\",\"img\",1,\"mat-icon\",\"notranslate\"],hostVars:7,hostBindings:function(rf,ctx){2&rf&&(_angular_core__WEBPACK_IMPORTED_MODULE_0__.Db(\"data-mat-icon-type\",ctx._usingFontIcon()?\"font\":\"svg\")(\"data-mat-icon-name\",ctx._svgName||ctx.fontIcon)(\"data-mat-icon-namespace\",ctx._svgNamespace||ctx.fontSet),_angular_core__WEBPACK_IMPORTED_MODULE_0__.Hb(\"mat-icon-inline\",ctx.inline)(\"mat-icon-no-color\",\"primary\"!==ctx.color&&\"accent\"!==ctx.color&&\"warn\"!==ctx.color))},inputs:{color:\"color\",inline:\"inline\",svgIcon:\"svgIcon\",fontSet:\"fontSet\",fontIcon:\"fontIcon\"},exportAs:[\"matIcon\"],features:[_angular_core__WEBPACK_IMPORTED_MODULE_0__.zb],ngContentSelectors:_c0,decls:1,vars:0,template:function(rf,ctx){1&rf&&(_angular_core__WEBPACK_IMPORTED_MODULE_0__.oc(),_angular_core__WEBPACK_IMPORTED_MODULE_0__.nc(0))},styles:[\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"],encapsulation:2,changeDetection:0}),MatIcon})(),MatIconModule=(()=>{class MatIconModule{}return MatIconModule.ɵmod=_angular_core__WEBPACK_IMPORTED_MODULE_0__.Nb({type:MatIconModule}),MatIconModule.ɵinj=_angular_core__WEBPACK_IMPORTED_MODULE_0__.Mb({factory:function(t){return new(t||MatIconModule)},imports:[[_angular_material_core__WEBPACK_IMPORTED_MODULE_1__.i],_angular_material_core__WEBPACK_IMPORTED_MODULE_1__.i]}),MatIconModule})()}}]);","name":"5-es2015.c7347c5a5e8c7d8bf43b.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[5],{\n\n/***/ \"NFeN\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export ICON_REGISTRY_PROVIDER */\n/* unused harmony export ICON_REGISTRY_PROVIDER_FACTORY */\n/* unused harmony export MAT_ICON_LOCATION */\n/* unused harmony export MAT_ICON_LOCATION_FACTORY */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return MatIcon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return MatIconModule; });\n/* unused harmony export MatIconRegistry */\n/* unused harmony export getMatIconFailedToSanitizeLiteralError */\n/* unused harmony export getMatIconFailedToSanitizeUrlError */\n/* unused harmony export getMatIconNameNotFoundError */\n/* unused harmony export getMatIconNoHttpProviderError */\n/* unused harmony export ɵ0 */\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"fXoL\");\n/* harmony import */ var _angular_material_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"FKr1\");\n/* harmony import */ var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"8LU1\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(\"ofXK\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(\"LRne\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(\"z6cu\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(\"cp0P\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(\"quSY\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(\"vkgz\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(\"lJxs\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(\"JIr8\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(\"nYR2\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(\"w1tV\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(\"IzEk\");\n/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(\"tk/3\");\n/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(\"jhN1\");\n\n\n\n\n\n\n\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\n\n\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\nlet MatIconRegistry = /*@__PURE__*/ (() => {\n    class MatIconRegistry {\n        constructor(_httpClient, _sanitizer, document, _errorHandler) {\n            this._httpClient = _httpClient;\n            this._sanitizer = _sanitizer;\n            this._errorHandler = _errorHandler;\n            /**\n             * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n             */\n            this._svgIconConfigs = new Map();\n            /**\n             * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n             * Multiple icon sets can be registered under the same namespace.\n             */\n            this._iconSetConfigs = new Map();\n            /** Cache for icons loaded by direct URLs. */\n            this._cachedIconsByUrl = new Map();\n            /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n            this._inProgressUrlFetches = new Map();\n            /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n            this._fontCssClassesByAlias = new Map();\n            /**\n             * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n             * The default 'material-icons' value assumes that the material icon font has been loaded as\n             * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n             */\n            this._defaultFontSetClass = 'material-icons';\n            this._document = document;\n        }\n        /**\n         * Registers an icon by URL in the default namespace.\n         * @param iconName Name under which the icon should be registered.\n         * @param url\n         */\n        addSvgIcon(iconName, url, options) {\n            return this.addSvgIconInNamespace('', iconName, url, options);\n        }\n        /**\n         * Registers an icon using an HTML string in the default namespace.\n         * @param iconName Name under which the icon should be registered.\n         * @param literal SVG source of the icon.\n         */\n        addSvgIconLiteral(iconName, literal, options) {\n            return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n        }\n        /**\n         * Registers an icon by URL in the specified namespace.\n         * @param namespace Namespace in which the icon should be registered.\n         * @param iconName Name under which the icon should be registered.\n         * @param url\n         */\n        addSvgIconInNamespace(namespace, iconName, url, options) {\n            return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n        }\n        /**\n         * Registers an icon using an HTML string in the specified namespace.\n         * @param namespace Namespace in which the icon should be registered.\n         * @param iconName Name under which the icon should be registered.\n         * @param literal SVG source of the icon.\n         */\n        addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n            const cleanLiteral = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* SecurityContext */ \"K\"].HTML, literal);\n            // TODO: add an ngDevMode check\n            if (!cleanLiteral) {\n                throw getMatIconFailedToSanitizeLiteralError(literal);\n            }\n            return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n        }\n        /**\n         * Registers an icon set by URL in the default namespace.\n         * @param url\n         */\n        addSvgIconSet(url, options) {\n            return this.addSvgIconSetInNamespace('', url, options);\n        }\n        /**\n         * Registers an icon set using an HTML string in the default namespace.\n         * @param literal SVG source of the icon set.\n         */\n        addSvgIconSetLiteral(literal, options) {\n            return this.addSvgIconSetLiteralInNamespace('', literal, options);\n        }\n        /**\n         * Registers an icon set by URL in the specified namespace.\n         * @param namespace Namespace in which to register the icon set.\n         * @param url\n         */\n        addSvgIconSetInNamespace(namespace, url, options) {\n            return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n        }\n        /**\n         * Registers an icon set using an HTML string in the specified namespace.\n         * @param namespace Namespace in which to register the icon set.\n         * @param literal SVG source of the icon set.\n         */\n        addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n            const cleanLiteral = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* SecurityContext */ \"K\"].HTML, literal);\n            if (!cleanLiteral) {\n                throw getMatIconFailedToSanitizeLiteralError(literal);\n            }\n            return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n        }\n        /**\n         * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n         * component with the alias as the fontSet input will cause the class name to be applied\n         * to the `<mat-icon>` element.\n         *\n         * @param alias Alias for the font.\n         * @param className Class name override to be used instead of the alias.\n         */\n        registerFontClassAlias(alias, className = alias) {\n            this._fontCssClassesByAlias.set(alias, className);\n            return this;\n        }\n        /**\n         * Returns the CSS class name associated with the alias by a previous call to\n         * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n         */\n        classNameForFontAlias(alias) {\n            return this._fontCssClassesByAlias.get(alias) || alias;\n        }\n        /**\n         * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n         * have a fontSet input value, and is not loading an icon by name or URL.\n         *\n         * @param className\n         */\n        setDefaultFontSetClass(className) {\n            this._defaultFontSetClass = className;\n            return this;\n        }\n        /**\n         * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n         * have a fontSet input value, and is not loading an icon by name or URL.\n         */\n        getDefaultFontSetClass() {\n            return this._defaultFontSetClass;\n        }\n        /**\n         * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n         * The response from the URL may be cached so this will not always cause an HTTP request, but\n         * the produced element will always be a new copy of the originally fetched icon. (That is,\n         * it will not contain any modifications made to elements previously returned).\n         *\n         * @param safeUrl URL from which to fetch the SVG icon.\n         */\n        getSvgIconFromUrl(safeUrl) {\n            const url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* SecurityContext */ \"K\"].RESOURCE_URL, safeUrl);\n            if (!url) {\n                throw getMatIconFailedToSanitizeUrlError(safeUrl);\n            }\n            const cachedIcon = this._cachedIconsByUrl.get(url);\n            if (cachedIcon) {\n                return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[/* of */ \"a\"])(cloneSvg(cachedIcon));\n            }\n            return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__[/* tap */ \"a\"])(svg => this._cachedIconsByUrl.set(url, svg)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__[/* map */ \"a\"])(svg => cloneSvg(svg)));\n        }\n        /**\n         * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n         * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n         * if not, the Observable will throw an error.\n         *\n         * @param name Name of the icon to be retrieved.\n         * @param namespace Namespace in which to look for the icon.\n         */\n        getNamedSvgIcon(name, namespace = '') {\n            // Return (copy of) cached icon if possible.\n            const key = iconKey(namespace, name);\n            const config = this._svgIconConfigs.get(key);\n            if (config) {\n                return this._getSvgFromConfig(config);\n            }\n            // See if we have any icon sets registered for the namespace.\n            const iconSetConfigs = this._iconSetConfigs.get(namespace);\n            if (iconSetConfigs) {\n                return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n            }\n            return Object(rxjs__WEBPACK_IMPORTED_MODULE_5__[/* throwError */ \"a\"])(getMatIconNameNotFoundError(key));\n        }\n        ngOnDestroy() {\n            this._svgIconConfigs.clear();\n            this._iconSetConfigs.clear();\n            this._cachedIconsByUrl.clear();\n        }\n        /**\n         * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n         */\n        _getSvgFromConfig(config) {\n            if (config.svgText) {\n                // We already have the SVG element for this icon, return a copy.\n                return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[/* of */ \"a\"])(cloneSvg(this._svgElementFromConfig(config)));\n            }\n            else {\n                // Fetch the icon from the config's URL, cache it, and return a copy.\n                return this._loadSvgIconFromConfig(config).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__[/* map */ \"a\"])(svg => cloneSvg(svg)));\n            }\n        }\n        /**\n         * Attempts to find an icon with the specified name in any of the SVG icon sets.\n         * First searches the available cached icons for a nested element with a matching name, and\n         * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n         * that have not been cached, and searches again after all fetches are completed.\n         * The returned Observable produces the SVG element if possible, and throws\n         * an error if no icon with the specified name can be found.\n         */\n        _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n            // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n            // requested name.\n            const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (namedIcon) {\n                // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n                // time anyway, there's probably not much advantage compared to just always extracting\n                // it from the icon set.\n                return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[/* of */ \"a\"])(namedIcon);\n            }\n            // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n            // fetched, fetch them now and look for iconName in the results.\n            const iconSetFetchRequests = iconSetConfigs\n                .filter(iconSetConfig => !iconSetConfig.svgText)\n                .map(iconSetConfig => {\n                return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_10__[/* catchError */ \"a\"])((err) => {\n                    const url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* SecurityContext */ \"K\"].RESOURCE_URL, iconSetConfig.url);\n                    // Swallow errors fetching individual URLs so the\n                    // combined Observable won't necessarily fail.\n                    const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                    this._errorHandler.handleError(new Error(errorMessage));\n                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[/* of */ \"a\"])(null);\n                }));\n            });\n            // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n            // cached SVG element (unless the request failed), and we can check again for the icon.\n            return Object(rxjs__WEBPACK_IMPORTED_MODULE_6__[/* forkJoin */ \"a\"])(iconSetFetchRequests).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__[/* map */ \"a\"])(() => {\n                const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n                // TODO: add an ngDevMode check\n                if (!foundIcon) {\n                    throw getMatIconNameNotFoundError(name);\n                }\n                return foundIcon;\n            }));\n        }\n        /**\n         * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n         * tag matches the specified name. If found, copies the nested element to a new SVG element and\n         * returns it. Returns null if no matching element is found.\n         */\n        _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n            // Iterate backwards, so icon sets added later have precedence.\n            for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n                const config = iconSetConfigs[i];\n                // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n                // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n                // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n                // some of the parsing.\n                if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n                    const svg = this._svgElementFromConfig(config);\n                    const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                    if (foundIcon) {\n                        return foundIcon;\n                    }\n                }\n            }\n            return null;\n        }\n        /**\n         * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n         * from it.\n         */\n        _loadSvgIconFromConfig(config) {\n            return this._fetchIcon(config).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__[/* tap */ \"a\"])(svgText => config.svgText = svgText), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__[/* map */ \"a\"])(() => this._svgElementFromConfig(config)));\n        }\n        /**\n         * Loads the content of the icon set URL specified in the\n         * SvgIconConfig and attaches it to the config.\n         */\n        _loadSvgIconSetFromConfig(config) {\n            if (config.svgText) {\n                return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__[/* of */ \"a\"])(null);\n            }\n            return this._fetchIcon(config).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_8__[/* tap */ \"a\"])(svgText => config.svgText = svgText));\n        }\n        /**\n         * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n         * tag matches the specified name. If found, copies the nested element to a new SVG element and\n         * returns it. Returns null if no matching element is found.\n         */\n        _extractSvgIconFromSet(iconSet, iconName, options) {\n            // Use the `id=\"iconName\"` syntax in order to escape special\n            // characters in the ID (versus using the #iconName syntax).\n            const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n            if (!iconSource) {\n                return null;\n            }\n            // Clone the element and remove the ID to prevent multiple elements from being added\n            // to the page with the same ID.\n            const iconElement = iconSource.cloneNode(true);\n            iconElement.removeAttribute('id');\n            // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n            // the content of a new <svg> node.\n            if (iconElement.nodeName.toLowerCase() === 'svg') {\n                return this._setSvgAttributes(iconElement, options);\n            }\n            // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n            // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n            // tag is problematic on Firefox, because it needs to include the current page path.\n            if (iconElement.nodeName.toLowerCase() === 'symbol') {\n                return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n            }\n            // createElement('SVG') doesn't work as expected; the DOM ends up with\n            // the correct nodes, but the SVG content doesn't render. Instead we\n            // have to create an empty SVG node using innerHTML and append its content.\n            // Elements created using DOMParser.parseFromString have the same problem.\n            // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n            const svg = this._svgElementFromString('<svg></svg>');\n            // Clone the node so we don't remove it from the parent icon set element.\n            svg.appendChild(iconElement);\n            return this._setSvgAttributes(svg, options);\n        }\n        /**\n         * Creates a DOM element from the given SVG string.\n         */\n        _svgElementFromString(str) {\n            const div = this._document.createElement('DIV');\n            div.innerHTML = str;\n            const svg = div.querySelector('svg');\n            // TODO: add an ngDevMode check\n            if (!svg) {\n                throw Error('<svg> tag not found');\n            }\n            return svg;\n        }\n        /**\n         * Converts an element into an SVG node by cloning all of its children.\n         */\n        _toSvgElement(element) {\n            const svg = this._svgElementFromString('<svg></svg>');\n            const attributes = element.attributes;\n            // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n            for (let i = 0; i < attributes.length; i++) {\n                const { name, value } = attributes[i];\n                if (name !== 'id') {\n                    svg.setAttribute(name, value);\n                }\n            }\n            for (let i = 0; i < element.childNodes.length; i++) {\n                if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                    svg.appendChild(element.childNodes[i].cloneNode(true));\n                }\n            }\n            return svg;\n        }\n        /**\n         * Sets the default attributes for an SVG element to be used as an icon.\n         */\n        _setSvgAttributes(svg, options) {\n            svg.setAttribute('fit', '');\n            svg.setAttribute('height', '100%');\n            svg.setAttribute('width', '100%');\n            svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n            svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n            if (options && options.viewBox) {\n                svg.setAttribute('viewBox', options.viewBox);\n            }\n            return svg;\n        }\n        /**\n         * Returns an Observable which produces the string contents of the given icon. Results may be\n         * cached, so future calls with the same URL may not cause another HTTP request.\n         */\n        _fetchIcon(iconConfig) {\n            var _a;\n            const { url: safeUrl, options } = iconConfig;\n            const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n            if (!this._httpClient) {\n                throw getMatIconNoHttpProviderError();\n            }\n            // TODO: add an ngDevMode check\n            if (safeUrl == null) {\n                throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n            }\n            const url = this._sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* SecurityContext */ \"K\"].RESOURCE_URL, safeUrl);\n            // TODO: add an ngDevMode check\n            if (!url) {\n                throw getMatIconFailedToSanitizeUrlError(safeUrl);\n            }\n            // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n            // already a request in progress for that URL. It's necessary to call share() on the\n            // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n            const inProgressFetch = this._inProgressUrlFetches.get(url);\n            if (inProgressFetch) {\n                return inProgressFetch;\n            }\n            const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_11__[/* finalize */ \"a\"])(() => this._inProgressUrlFetches.delete(url)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__[/* share */ \"a\"])());\n            this._inProgressUrlFetches.set(url, req);\n            return req;\n        }\n        /**\n         * Registers an icon config by name in the specified namespace.\n         * @param namespace Namespace in which to register the icon config.\n         * @param iconName Name under which to register the config.\n         * @param config Config to be registered.\n         */\n        _addSvgIconConfig(namespace, iconName, config) {\n            this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n            return this;\n        }\n        /**\n         * Registers an icon set config in the specified namespace.\n         * @param namespace Namespace in which to register the icon config.\n         * @param config Config to be registered.\n         */\n        _addSvgIconSetConfig(namespace, config) {\n            const configNamespace = this._iconSetConfigs.get(namespace);\n            if (configNamespace) {\n                configNamespace.push(config);\n            }\n            else {\n                this._iconSetConfigs.set(namespace, [config]);\n            }\n            return this;\n        }\n        /** Parses a config's text into an SVG element. */\n        _svgElementFromConfig(config) {\n            if (!config.svgElement) {\n                const svg = this._svgElementFromString(config.svgText);\n                this._setSvgAttributes(svg, config.options);\n                config.svgElement = svg;\n            }\n            return config.svgElement;\n        }\n    }\n    MatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵinject */ \"cc\"](_angular_common_http__WEBPACK_IMPORTED_MODULE_14__[/* HttpClient */ \"a\"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵinject */ \"cc\"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__[/* DomSanitizer */ \"b\"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵinject */ \"cc\"](_angular_common__WEBPACK_IMPORTED_MODULE_3__[/* DOCUMENT */ \"d\"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵinject */ \"cc\"](_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ErrorHandler */ \"n\"])); };\n    MatIconRegistry.ɵprov = /*@__PURE__*/ Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdefineInjectable */ \"Lb\"])({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵinject */ \"cc\"])(_angular_common_http__WEBPACK_IMPORTED_MODULE_14__[/* HttpClient */ \"a\"], 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵinject */ \"cc\"])(_angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__[/* DomSanitizer */ \"b\"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵinject */ \"cc\"])(_angular_common__WEBPACK_IMPORTED_MODULE_3__[/* DOCUMENT */ \"d\"], 8), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵinject */ \"cc\"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ErrorHandler */ \"n\"])); }, token: MatIconRegistry, providedIn: \"root\" });\n    return MatIconRegistry;\n})();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [/*@__PURE__*/ new _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Optional */ \"C\"](), /*@__PURE__*/ new _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* SkipSelf */ \"M\"](), MatIconRegistry],\n        [/*@__PURE__*/ new _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Optional */ \"C\"](), _angular_common_http__WEBPACK_IMPORTED_MODULE_14__[/* HttpClient */ \"a\"]],\n        _angular_platform_browser__WEBPACK_IMPORTED_MODULE_15__[/* DomSanitizer */ \"b\"],\n        _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ErrorHandler */ \"n\"],\n        [/*@__PURE__*/ new _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* Optional */ \"C\"](), _angular_common__WEBPACK_IMPORTED_MODULE_3__[/* DOCUMENT */ \"d\"]],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nclass MatIconBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatIconMixinBase = /*@__PURE__*/ Object(_angular_material_core__WEBPACK_IMPORTED_MODULE_1__[/* mixinColor */ \"u\"])(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = /*@__PURE__*/ new _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* InjectionToken */ \"s\"]('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* inject */ \"X\"])(_angular_common__WEBPACK_IMPORTED_MODULE_3__[/* DOCUMENT */ \"d\"]);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = /*@__PURE__*/ /*@__PURE__*/ funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\nlet MatIcon = /*@__PURE__*/ (() => {\n    class MatIcon extends _MatIconMixinBase {\n        constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n            super(elementRef);\n            this._iconRegistry = _iconRegistry;\n            this._location = _location;\n            this._errorHandler = _errorHandler;\n            this._inline = false;\n            /** Subscription to the current in-progress SVG icon request. */\n            this._currentIconFetch = rxjs__WEBPACK_IMPORTED_MODULE_7__[/* Subscription */ \"a\"].EMPTY;\n            // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n            // the right thing to do for the majority of icon use-cases.\n            if (!ariaHidden) {\n                elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n            }\n        }\n        /**\n         * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n         * the element the icon is contained in.\n         */\n        get inline() {\n            return this._inline;\n        }\n        set inline(inline) {\n            this._inline = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__[/* coerceBooleanProperty */ \"c\"])(inline);\n        }\n        /** Name of the icon in the SVG icon set. */\n        get svgIcon() { return this._svgIcon; }\n        set svgIcon(value) {\n            if (value !== this._svgIcon) {\n                if (value) {\n                    this._updateSvgIcon(value);\n                }\n                else if (this._svgIcon) {\n                    this._clearSvgElement();\n                }\n                this._svgIcon = value;\n            }\n        }\n        /** Font set that the icon is a part of. */\n        get fontSet() { return this._fontSet; }\n        set fontSet(value) {\n            const newValue = this._cleanupFontValue(value);\n            if (newValue !== this._fontSet) {\n                this._fontSet = newValue;\n                this._updateFontIconClasses();\n            }\n        }\n        /** Name of an icon within a font set. */\n        get fontIcon() { return this._fontIcon; }\n        set fontIcon(value) {\n            const newValue = this._cleanupFontValue(value);\n            if (newValue !== this._fontIcon) {\n                this._fontIcon = newValue;\n                this._updateFontIconClasses();\n            }\n        }\n        /**\n         * Splits an svgIcon binding value into its icon set and icon name components.\n         * Returns a 2-element array of [(icon set), (icon name)].\n         * The separator for the two fields is ':'. If there is no separator, an empty\n         * string is returned for the icon set and the entire value is returned for\n         * the icon name. If the argument is falsy, returns an array of two empty strings.\n         * Throws an error if the name contains two or more ':' separators.\n         * Examples:\n         *   `'social:cake' -> ['social', 'cake']\n         *   'penguin' -> ['', 'penguin']\n         *   null -> ['', '']\n         *   'a:b:c' -> (throws Error)`\n         */\n        _splitIconName(iconName) {\n            if (!iconName) {\n                return ['', ''];\n            }\n            const parts = iconName.split(':');\n            switch (parts.length) {\n                case 1: return ['', parts[0]]; // Use default namespace.\n                case 2: return parts;\n                default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n            }\n        }\n        ngOnInit() {\n            // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n            // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n            this._updateFontIconClasses();\n        }\n        ngAfterViewChecked() {\n            const cachedElements = this._elementsWithExternalReferences;\n            if (cachedElements && cachedElements.size) {\n                const newPath = this._location.getPathname();\n                // We need to check whether the URL has changed on each change detection since\n                // the browser doesn't have an API that will let us react on link clicks and\n                // we can't depend on the Angular router. The references need to be updated,\n                // because while most browsers don't care whether the URL is correct after\n                // the first render, Safari will break if the user navigates to a different\n                // page and the SVG isn't re-rendered.\n                if (newPath !== this._previousPath) {\n                    this._previousPath = newPath;\n                    this._prependPathToReferences(newPath);\n                }\n            }\n        }\n        ngOnDestroy() {\n            this._currentIconFetch.unsubscribe();\n            if (this._elementsWithExternalReferences) {\n                this._elementsWithExternalReferences.clear();\n            }\n        }\n        _usingFontIcon() {\n            return !this.svgIcon;\n        }\n        _setSvgElement(svg) {\n            this._clearSvgElement();\n            // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n            // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n            // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n            const styleTags = svg.querySelectorAll('style');\n            for (let i = 0; i < styleTags.length; i++) {\n                styleTags[i].textContent += ' ';\n            }\n            // Note: we do this fix here, rather than the icon registry, because the\n            // references have to point to the URL at the time that the icon was created.\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n            this._elementRef.nativeElement.appendChild(svg);\n        }\n        _clearSvgElement() {\n            const layoutElement = this._elementRef.nativeElement;\n            let childCount = layoutElement.childNodes.length;\n            if (this._elementsWithExternalReferences) {\n                this._elementsWithExternalReferences.clear();\n            }\n            // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n            // we can't use innerHTML, because IE will throw if the element has a data binding.\n            while (childCount--) {\n                const child = layoutElement.childNodes[childCount];\n                // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n                // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n                if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                    layoutElement.removeChild(child);\n                }\n            }\n        }\n        _updateFontIconClasses() {\n            if (!this._usingFontIcon()) {\n                return;\n            }\n            const elem = this._elementRef.nativeElement;\n            const fontSetClass = this.fontSet ?\n                this._iconRegistry.classNameForFontAlias(this.fontSet) :\n                this._iconRegistry.getDefaultFontSetClass();\n            if (fontSetClass != this._previousFontSetClass) {\n                if (this._previousFontSetClass) {\n                    elem.classList.remove(this._previousFontSetClass);\n                }\n                if (fontSetClass) {\n                    elem.classList.add(fontSetClass);\n                }\n                this._previousFontSetClass = fontSetClass;\n            }\n            if (this.fontIcon != this._previousFontIconClass) {\n                if (this._previousFontIconClass) {\n                    elem.classList.remove(this._previousFontIconClass);\n                }\n                if (this.fontIcon) {\n                    elem.classList.add(this.fontIcon);\n                }\n                this._previousFontIconClass = this.fontIcon;\n            }\n        }\n        /**\n         * Cleans up a value to be used as a fontIcon or fontSet.\n         * Since the value ends up being assigned as a CSS class, we\n         * have to trim the value and omit space-separated values.\n         */\n        _cleanupFontValue(value) {\n            return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n        }\n        /**\n         * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n         * reference. This is required because WebKit browsers require references to be prefixed with\n         * the current path, if the page has a `base` tag.\n         */\n        _prependPathToReferences(path) {\n            const elements = this._elementsWithExternalReferences;\n            if (elements) {\n                elements.forEach((attrs, element) => {\n                    attrs.forEach(attr => {\n                        element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                    });\n                });\n            }\n        }\n        /**\n         * Caches the children of an SVG element that have `url()`\n         * references that we need to prefix with the current path.\n         */\n        _cacheChildrenWithExternalReferences(element) {\n            const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n            const elements = this._elementsWithExternalReferences =\n                this._elementsWithExternalReferences || new Map();\n            for (let i = 0; i < elementsWithFuncIri.length; i++) {\n                funcIriAttributes.forEach(attr => {\n                    const elementWithReference = elementsWithFuncIri[i];\n                    const value = elementWithReference.getAttribute(attr);\n                    const match = value ? value.match(funcIriPattern) : null;\n                    if (match) {\n                        let attributes = elements.get(elementWithReference);\n                        if (!attributes) {\n                            attributes = [];\n                            elements.set(elementWithReference, attributes);\n                        }\n                        attributes.push({ name: attr, value: match[1] });\n                    }\n                });\n            }\n        }\n        /** Sets a new SVG icon with a particular name. */\n        _updateSvgIcon(rawName) {\n            this._svgNamespace = null;\n            this._svgName = null;\n            this._currentIconFetch.unsubscribe();\n            if (rawName) {\n                const [namespace, iconName] = this._splitIconName(rawName);\n                if (namespace) {\n                    this._svgNamespace = namespace;\n                }\n                if (iconName) {\n                    this._svgName = iconName;\n                }\n                this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_13__[/* take */ \"a\"])(1))\n                    .subscribe(svg => this._setSvgElement(svg), (err) => {\n                    const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                    this._errorHandler.handleError(new Error(errorMessage));\n                });\n            }\n        }\n    }\n    MatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdirectiveInject */ \"Pb\"](_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ElementRef */ \"l\"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdirectiveInject */ \"Pb\"](MatIconRegistry), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵinjectAttribute */ \"dc\"]('aria-hidden'), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdirectiveInject */ \"Pb\"](MAT_ICON_LOCATION), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdirectiveInject */ \"Pb\"](_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ErrorHandler */ \"n\"])); };\n    MatIcon.ɵcmp = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdefineComponent */ \"Jb\"]({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 7, hostBindings: function MatIcon_HostBindings(rf, ctx) {\n            if (rf & 2) {\n                _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵattribute */ \"Db\"](\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n                _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵclassProp */ \"Hb\"](\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n            }\n        }, inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, exportAs: [\"matIcon\"], features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵInheritDefinitionFeature */ \"zb\"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) {\n            if (rf & 1) {\n                _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵprojectionDef */ \"oc\"]();\n                _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵprojection */ \"nc\"](0);\n            }\n        }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\n    return MatIcon;\n})();\nlet MatIconModule = /*@__PURE__*/ (() => {\n    class MatIconModule {\n    }\n    MatIconModule.ɵmod = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdefineNgModule */ \"Nb\"]({ type: MatIconModule });\n    MatIconModule.ɵinj = /*@__PURE__*/ _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdefineInjector */ \"Mb\"]({ factory: function MatIconModule_Factory(t) { return new (t || MatIconModule)(); }, imports: [[_angular_material_core__WEBPACK_IMPORTED_MODULE_1__[/* MatCommonModule */ \"i\"]], _angular_material_core__WEBPACK_IMPORTED_MODULE_1__[/* MatCommonModule */ \"i\"]] });\n    return MatIconModule;\n})();\n/*@__PURE__*/ (function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵsetNgModuleScope */ \"Ec\"](MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [_angular_material_core__WEBPACK_IMPORTED_MODULE_1__[/* MatCommonModule */ \"i\"]]; }, exports: function () { return [MatIcon, _angular_material_core__WEBPACK_IMPORTED_MODULE_1__[/* MatCommonModule */ \"i\"]]; } }); })();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=icon.js.map\n\n\n/***/ })\n\n}]);","inputSourceMap":null}