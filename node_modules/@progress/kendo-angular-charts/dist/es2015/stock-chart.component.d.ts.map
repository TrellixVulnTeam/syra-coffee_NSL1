{"version":3,"file":"stock-chart.component.d.ts","sources":["stock-chart.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { NgZone, ElementRef, EventEmitter, ChangeDetectorRef, Renderer2 } from '@angular/core';\nimport { ConfigurationService } from './common/configuration.service';\nimport { ChartComponent } from './chart.component';\nimport { ChartInstanceObserver } from './common/chart-instance-observer';\nimport { ThemeService } from './common/theme.service';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { DragAction, Zoomable } from './common/property-types';\nimport { NavigatorFilterEvent } from './stock-chart/events/navigator-filter-event';\nimport { StockInstanceEventService } from './stock-chart/events/instance-event.service';\nimport { Navigator as StockNavigator } from './stock-chart/option-types';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\n/**\n * The root StockChart component.\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *     <kendo-stockchart>\n *         <kendo-chart-series>\n *             <kendo-chart-series-item type=\"line\" [data]=\"data\" field=\"value\" categoryField=\"date\">\n *             </kendo-chart-series-item>\n *         </kendo-chart-series>\n *         <kendo-chart-navigator>\n *             <kendo-chart-navigator-select to=\"2017/02/01\">\n *             </kendo-chart-navigator-select>\n *             <kendo-chart-navigator-series>\n *                 <kendo-chart-navigator-series-item type=\"area\" [data]=\"data\" field=\"value\" categoryField=\"date\">\n *                 </kendo-chart-navigator-series-item>\n *             </kendo-chart-navigator-series>\n *         </kendo-chart-navigator>\n *     </kendo-stockchart>\n *   `\n * })\n * class AppComponent {\n *   public data: any[] = [];\n *\n *   constructor() {\n *      for (let idx = 0; idx < 100; idx++) {\n *          this.data.push({\n *              date: new Date(2017, 0, idx),\n *              value: Math.random() * 100\n *          });\n *      }\n *   }\n * }\n *\n * ```\n */\nexport declare class StockChartComponent extends ChartComponent {\n    configurationService: ConfigurationService;\n    themeService: ThemeService;\n    protected element: ElementRef;\n    protected intl: IntlService;\n    protected localizationService: LocalizationService;\n    protected ngZone: NgZone;\n    protected instanceEventService: StockInstanceEventService;\n    protected changeDetector: ChangeDetectorRef;\n    protected renderer: Renderer2;\n    /**\n     * The configuration options for the data navigator.\n     */\n    navigator: StockNavigator;\n    /**\n     * @hidden\n     */\n    pannable: boolean | DragAction;\n    /**\n     * @hidden\n     */\n    zoomable: boolean | Zoomable;\n    /**\n     * Fires when the navigator range is changed.\n     */\n    navigatorFilter: EventEmitter<NavigatorFilterEvent>;\n    protected redrawSlaves: boolean;\n    protected hostClasses: string[];\n    constructor(configurationService: ConfigurationService, themeService: ThemeService, element: ElementRef, intl: IntlService, localizationService: LocalizationService, ngZone: NgZone, instanceEventService: StockInstanceEventService, changeDetector: ChangeDetectorRef, renderer: Renderer2);\n    /**\n     * If called, the navigator pane is not redrawn the next time the StockChart options are updated.\n     * The method is useful if you need to update only the main series data for the selected period.\n     */\n    skipNavigatorRedraw(): void;\n    protected createInstance(element: any, observer: ChartInstanceObserver): void;\n    protected updateOptions(): void;\n    private applyNavigatorDefaults;\n    private isDevMode;\n}\n"]}