{"version":3,"file":"chart.component.d.ts","sources":["chart.component.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { NgZone, OnDestroy, ChangeDetectorRef, AfterViewInit, AfterViewChecked, Renderer2, SimpleChange, OnChanges, OnInit } from '@angular/core';\nimport { QueryList } from '@angular/core';\nimport { ElementRef } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ChartComponentGenerated } from './chart.component.generated';\nimport { ConfigurationService } from './common/configuration.service';\nimport { LegendItemClickEvent } from './events/legend-item-click-event';\nimport { InstanceEventService } from './events/instance-event.service';\nimport { DonutCenterTemplateDirective } from './chart/donut-center-template.directive';\nimport { SeriesItemComponent } from './chart/series-item.component';\nimport { ThemeService } from './common/theme.service';\nimport { ChartInstanceObserver } from './common/chart-instance-observer';\nimport { TooltipPopupComponent } from './chart/tooltip/tooltip-popup.component';\nimport { CrosshairTooltipsContainerComponent } from './chart/tooltip/crosshair-tooltips-container.component';\nimport { ChartAxis } from './api-types/chart-axis.interface';\nimport { ChartPane } from './api-types/chart-pane.interface';\nimport { SeriesPoint } from './api-types/series-point.interface';\nimport { ChartPlotArea } from './api-types/chart-plotarea.interface';\nimport { ChartSVGExportOptions, ChartVisualExportOptions } from './common/api-types';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { ImageExportOptions, Group, Surface } from '@progress/kendo-drawing';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { PopupSettings } from './chart/tooltip/popup-settings.interface';\nimport './chart-defaults';\n/**\n * The root Chart component.\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *     <button (click)=\"toggleLegend()\">Toggle Legend</button>\n *     <button (click)=\"toggleSeries()\">Toggle Series</button>\n *     <kendo-chart>\n *       <kendo-chart-legend [visible]=\"legendVisible\">\n *       </kendo-chart-legend>\n *       <kendo-chart-series>\n *         <kendo-chart-series-item *ngIf=\"seriesVisible\" name=\"Series #1\"\n *                                   type=\"line\" [data]=\"[1, 2, 3]\">\n *         </kendo-chart-series-item>\n *       </kendo-chart-series>\n *     </kendo-chart>\n *   `\n * })\n * class AppComponent {\n *   public legendVisible: boolean = true;\n *   public seriesVisible: boolean = true;\n *\n *   public toggleSeries(): void {\n *     this.seriesVisible = !this.seriesVisible;\n *   }\n *\n *   public toggleLegend(): void {\n *     this.legendVisible = !this.legendVisible;\n *   }\n * }\n *\n * ```\n */\nexport declare class ChartComponent extends ChartComponentGenerated implements OnChanges, OnInit, OnDestroy, AfterViewInit, AfterViewChecked {\n    configurationService: ConfigurationService;\n    themeService: ThemeService;\n    protected element: ElementRef;\n    protected intl: IntlService;\n    protected localizationService: LocalizationService;\n    protected ngZone: NgZone;\n    protected instanceEventService: InstanceEventService;\n    protected changeDetector: ChangeDetectorRef;\n    protected renderer: Renderer2;\n    /**\n     * Fires when a legend item is clicked before the selected series visibility is toggled.\n     * Can be prevented.\n     */\n    legendItemClick: EventEmitter<LegendItemClickEvent>;\n    /**\n     * Limits the automatic resizing of the Chart. Sets the maximum number of times per second\n     * that the component redraws its content when the size of its container changes.\n     * Defaults to `10`. To disable the automatic resizing, set it to `0`.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     *     selector: 'my-app',\n     *     template: `\n     *         <kendo-chart [resizeRateLimit]=\"2\">\n     * <!--                 ^^^^^^^^^^^^^^^^^^^^^^\n     *       Will update the size of the Chart up to two times a second.\n     *       Resize the Plunkr pane or window to try it out.\n     * -->\n     *          <kendo-chart-series>\n     *            <kendo-chart-series-item [data]=\"seriesData\">\n     *           </kendo-chart-series-item>\n     *         </kendo-chart-series>\n     *       </kendo-chart>\n     *   `\n     * })\n     * export class AppComponent {\n     *    seriesData: number[] = [1, 2, 3, 5];\n     * }\n     * ```\n     */\n    resizeRateLimit: number;\n    /**\n     * The settings for the tooltip popup.\n     */\n    popupSettings: PopupSettings;\n    /**\n     * The Drawing `Surface` of the Chart.\n     */\n    surface: Surface;\n    seriesComponents: QueryList<SeriesItemComponent>;\n    donutCenterTemplate: DonutCenterTemplateDirective;\n    tooltipInstance: TooltipPopupComponent;\n    crossahirTooltips: CrosshairTooltipsContainerComponent;\n    surfaceElement: ElementRef;\n    /**\n     * @hidden\n     */\n    donutCenterStyle: any;\n    protected options: any;\n    protected theme: any;\n    protected subscription: Subscription;\n    protected suppressTransitions: boolean;\n    protected resizeTimeout: any;\n    protected redrawTimeout: any;\n    protected domSubscriptions: any;\n    protected destroyed: boolean;\n    protected subscriptions: any;\n    protected rtl: boolean;\n    protected hostClasses: string[];\n    constructor(configurationService: ConfigurationService, themeService: ThemeService, element: ElementRef, intl: IntlService, localizationService: LocalizationService, ngZone: NgZone, instanceEventService: InstanceEventService, changeDetector: ChangeDetectorRef, renderer: Renderer2);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngAfterViewChecked(): void;\n    ngOnChanges(changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    /**\n     * Updates the component fields with the specified values and refreshes the Chart.\n     *\n     * Use this method when the configuration values cannot be set through the template.\n     *\n     * @example\n     * ```ts-no-run\n     * chart.notifyChanges({ title: { text: 'New Title' } });\n     * ```\n     *\n     * @param changes An object containing the updated input fields.\n     */\n    notifyChanges(changes: any): void;\n    ngOnDestroy(): void;\n    protected createInstance(element: any, observer: ChartInstanceObserver): void;\n    /**\n     * Exports the Chart as an image. The export operation is asynchronous and returns a promise.\n     *\n     * @param {ImageExportOptions} options - The parameters for the exported image.\n     * @returns {Promise<string>} - A promise that will be resolved with a PNG image encoded as a Data URI.\n     */\n    exportImage(options?: ImageExportOptions): Promise<string>;\n    /**\n     * Exports the Chart as an SVG document. The export operation is asynchronous and returns a promise.\n     *\n     * @param options - The parameters for the exported file.\n     * @returns - A promise that will be resolved with an SVG document that is encoded as a Data URI.\n     */\n    exportSVG(options?: ChartSVGExportOptions): Promise<string>;\n    /**\n     * Exports the Chart as a Drawing `Scene`.\n     *\n     * @param options - The parameters for the export operation.\n     * @returns - The root Group of the scene.\n     */\n    exportVisual(options?: ChartVisualExportOptions | any): Group;\n    /**\n     * Returns the axis with the specified name.\n     *\n     * @param {string} name - The axis name.\n     * @returns {ChartAxis} - The axis with a corresponding name.\n     */\n    findAxisByName(name: string): ChartAxis;\n    /**\n     * Returns the pane at the specified index.\n     *\n     * @param {number} index - The pane index.\n     * @returns {ChartPane} - The pane at the specified index.\n     */\n    findPaneByIndex(index: number): ChartPane;\n    /**\n     * Returns the pane with the specified name.\n     *\n     * @param {string} name - The name of the pane.\n     * @returns {ChartPane} - The pane with the provided name.\n     */\n    findPaneByName(name: string): ChartPane;\n    /**\n     * Returns the plot area of the Chart.\n     * @returns {ChartPlotArea} - The plot area of the Chart.\n     */\n    getPlotArea(): ChartPlotArea;\n    /**\n     * Highlights the series points or the segments of a Pie, Donut, or Funnel charts.\n     *\n     * See [Series Highlight]({% slug serieshighlight_chart_charts %}) for more details.\n     *\n     * In the following example, the callback is evaluated for each data point.\n     * If the function returns `true`, the point is highlighted.\n     *\n     * {% meta height:500 %}\n     * {% embed_file elements/highlight/api/app.component.ts preview %}\n     * {% embed_file shared/app.module.ts hidden %}\n     * {% embed_file shared/main.ts hidden %}\n     * {% endmeta %}\n     *\n     * @param show - A Boolean value that indicates whether the highlight is shown or hidden.\n     * @param filter - A string that represents the series or category name, an object with the series and category name, or a function which will be called for each point. The function should return `true` for the points for which the highlight is toggled.\n     */\n    toggleHighlight(show: boolean, filter: string | {\n        category: string;\n        series: string;\n    } | {\n        (point: SeriesPoint): boolean;\n    }): void;\n    /**\n     * Hides the tooltip of the Chart.\n     */\n    hideTooltip(): void;\n    /**\n     * Shows the Chart tooltip of a specific point or the shared tooltip of a specific category.\n     *\n     * @param filter - The category for a shared tooltip or a function which will be called for each point until the function returns `true`.\n     */\n    showTooltip(filter: number | string | Date | {\n        (point: SeriesPoint): boolean;\n    }): void;\n    protected init(): void;\n    /**\n     * Detects the size of the container and redraws the Chart.\n     * Resizing is automatic unless you set the `resizeRateLimit` option to `0`.\n     */\n    resize(): void;\n    /**\n     * @hidden\n     */\n    onResize(_event?: any): void;\n    protected onLegendItemClick(e: any): void;\n    protected onInit(e: any): void;\n    protected onRender(e: any): void;\n    protected onShowTooltip(e: any): void;\n    protected onHideTooltip(e: any): void;\n    protected trigger(name: string, e: any): boolean;\n    protected requiresHandlers(names: string[]): boolean;\n    protected refresh(): void;\n    protected setChartAreaSize(): void;\n    protected updateOptions(): void;\n    /**\n     * @hidden\n     */\n    tooltipMouseleave(e: any): void;\n    /**\n     * @hidden\n     */\n    chartMouseleave(e: any): void;\n    protected readonly canRender: boolean;\n    protected readonly autoResize: boolean;\n    protected activeEmitter(name: string): any;\n    protected getDonutCenterStyle(): any;\n    protected refreshWait(): void;\n    protected run(callback: any, inZone?: boolean, detectChanges?: boolean): void;\n    protected detectChanges(): void;\n    protected intlChange(): void;\n    protected rtlChange(): void;\n    protected deferredRedraw(): void;\n    protected updateDirection(): void;\n    protected setDirection(): void;\n    protected readonly isRTL: boolean;\n}\n"]}