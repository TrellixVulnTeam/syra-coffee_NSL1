{"version":3,"file":"collection-item.component.d.ts","sources":["collection-item.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { OnChanges, OnDestroy, SimpleChange } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { CollectionService, Item } from './collection.service';\nimport { ConfigurationService } from './configuration.service';\n/**\n * @hidden\n */\nexport declare abstract class CollectionItemComponent implements Item, OnChanges, OnDestroy {\n    protected configurationService: ConfigurationService;\n    protected collectionService: CollectionService;\n    protected subscription: Subscription;\n    options: any;\n    constructor(configurationService: ConfigurationService, collectionService: CollectionService);\n    ngOnChanges(changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    /**\n     * Updates the component fields with the specified values and refreshes the Chart.\n     *\n     * Use this method when the configuration values cannot be set through the template.\n     *\n     * @example\n     * ```ts-no-run\n     * item.notifyChanges({ visible: true });\n     * ```\n     *\n     * @param changes An object containing the updated input fields.\n     */\n    notifyChanges(changes: any): void;\n    ngOnDestroy(): void;\n    protected notify(): void;\n}\n"]}