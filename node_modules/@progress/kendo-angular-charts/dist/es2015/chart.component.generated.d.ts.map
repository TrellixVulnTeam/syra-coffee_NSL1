{"version":3,"file":"chart.component.generated.d.ts","sources":["chart.component.generated.d.ts"],"names":[],"mappingssourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2020 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport { EventEmitter } from '@angular/core';\nimport { ConfigurationService } from './common/configuration.service';\nimport { AxisDefaults, CategoryAxis, ChartArea, DragAction, Legend, Pane, PaneDefaults, PlotArea, Series, SeriesDefaults, Title, Tooltip, ValueAxis, XAxis, YAxis, Zoomable } from './common/property-types';\nimport { AxisLabelClickEvent } from './events/axis-label-click-event';\nimport { DragEndEvent } from './events/drag-end-event';\nimport { DragEvent } from './events/drag-event';\nimport { DragStartEvent } from './events/drag-start-event';\nimport { LegendItemHoverEvent } from './events/legend-item-hover-event';\nimport { LegendItemLeaveEvent } from './events/legend-item-leave-event';\nimport { NoteClickEvent } from './events/note-click-event';\nimport { NoteHoverEvent } from './events/note-hover-event';\nimport { NoteLeaveEvent } from './events/note-leave-event';\nimport { PaneRenderEvent } from './events/pane-render-event';\nimport { PlotAreaClickEvent } from './events/plot-area-click-event';\nimport { PlotAreaHoverEvent } from './events/plot-area-hover-event';\nimport { PlotAreaLeaveEvent } from './events/plot-area-leave-event';\nimport { RenderEvent } from './events/render-event';\nimport { SelectEndEvent } from './events/select-end-event';\nimport { SelectEvent } from './events/select-event';\nimport { SelectStartEvent } from './events/select-start-event';\nimport { SeriesClickEvent } from './events/series-click-event';\nimport { SeriesHoverEvent } from './events/series-hover-event';\nimport { SeriesOverEvent } from './events/series-over-event';\nimport { SeriesLeaveEvent } from './events/series-leave-event';\nimport { ZoomEndEvent } from './events/zoom-end-event';\nimport { ZoomEvent } from './events/zoom-event';\nimport { ZoomStartEvent } from './events/zoom-start-event';\n/**\n * @hidden\n */\nexport declare abstract class ChartComponentGenerated {\n    configurationService: ConfigurationService;\n    /**\n     * Specifies if the Chart can be panned.\n     */\n    pannable: boolean | DragAction;\n    /**\n     * Sets the preferred rendering engine.\n     * If not supported by the browser, the Chart switches to the first available mode.\n     *\n     * The supported values are:\n     * - `\"svg\"`&mdash;If available, renders the component as an inline `.svg` file.\n     * - `\"canvas\"`&mdash;If available, renders the component as a `canvas` element.\n     */\n    renderAs: 'svg' | 'canvas';\n    /**\n     * The default colors for the Chart series.\n     * When all colors are used, new colors are pulled from the start again.\n     */\n    seriesColors: string[];\n    /**\n     * The configuration options or the text of the Chart title.\n     */\n    title: string | Title;\n    /**\n     * If set to `true`, the Chart plays animations when it displays the series.\n     * By default, animations are enabled.\n     */\n    transitions: boolean;\n    /**\n     * Specifies if the Chart can be zoomed.\n     */\n    zoomable: boolean | Zoomable;\n    /**\n     * The default options for all Chart axes. Accepts the options which are supported by\n     * [`categoryAxis`]({% slug api_charts_categoryaxisitemcomponent %}),\n     * [`valueAxis`]({% slug api_charts_valueaxisitemcomponent %}),\n     * [`xAxis`]({% slug api_charts_xaxisitemcomponent %}),\n     * and [`yAxis`]({% slug api_charts_yaxisitemcomponent %}).\n     */\n    axisDefaults: AxisDefaults;\n    /**\n     * The configuration options of the category axis.\n     */\n    categoryAxis: CategoryAxis | CategoryAxis[];\n    /**\n     * The configuration options of the Chart area.\n     * Represents the entire visible area of the Chart.\n     */\n    chartArea: ChartArea;\n    /**\n     * The configuration options of the Chart legend.\n     */\n    legend: Legend;\n    /**\n     * The configuration of the Chart panes.\n     * Panes are used to split the Chart into two or more parts. The panes are ordered from top to bottom.\n     * To associate each axis with a pane, set its `pane` option to the name of the desired pane.\n     * Axis that do not have a specified pane are placed in the top (default) pane.\n     * To move a series to the desired pane, associate them with an axis.\n     */\n    panes: Pane[];\n    /**\n     * The default options of all panes.\n     */\n    paneDefaults: PaneDefaults;\n    /**\n     * The configuration options of the plot area.\n     * The plot area is the area which displays the series.\n     */\n    plotArea: PlotArea;\n    /**\n     * The configuration of the Chart series.\n     * The series type is determined by the value of the type field.\n     * If a type value is missing, the Chart renders the type that is\n     * specified in [`seriesDefaults`]({% slug api_charts_seriesdefaultscomponent %}).\n     * Some options accept functions as arguments. These arguments are evaluated for each point\n     * which is supplied as a parameter. If no value is returned, the Chart uses the `theme` or\n     * [`seriesDefaults`]({% slug api_charts_seriesdefaultscomponent %}) values.\n     */\n    series: Series[];\n    /**\n     * The default options of all series.\n     */\n    seriesDefaults: SeriesDefaults;\n    /**\n     * The configuration options of the Chart series tooltips.\n     * The tooltip of the Chart series is displayed when the\n     * [`tooltip.visible`]({% slug api_charts_tooltipcomponent %}#toc-visible) option is set to `true`.\n     */\n    tooltip: Tooltip;\n    /**\n     * The configuration options of the value axis.\n     */\n    valueAxis: ValueAxis | ValueAxis[];\n    /**\n     * The configuration options of the Scatter Chart X-axis.\n     * Supports all [`valueAxis`]({% slug api_charts_valueaxisitemcomponent %}) options.\n     */\n    xAxis: XAxis | XAxis[];\n    /**\n     * The configuration options of the Scatter Chart Y-axis.\n     * Supports all [`valueAxis`]({% slug api_charts_valueaxisitemcomponent %}) options.\n     */\n    yAxis: YAxis | YAxis[];\n    /**\n     * Fires when the user clicks an axis label ([see example]({% slug overview_chart_charts %}#toc-events)).\n     */\n    axisLabelClick: EventEmitter<AxisLabelClickEvent>;\n    /**\n     * Fires as long as the user is dragging the Chart with the mouse or through swipe gestures.\n     */\n    drag: EventEmitter<DragEvent>;\n    /**\n     * Fires when the user stops dragging the Chart.\n     */\n    dragEnd: EventEmitter<DragEndEvent>;\n    /**\n     * Fires when the user starts dragging the Chart.\n     */\n    dragStart: EventEmitter<DragStartEvent>;\n    /**\n     * Fires when the user hovers over a legend item ([see example]({% slug overview_chart_charts %}#toc-events)).\n     */\n    legendItemHover: EventEmitter<LegendItemHoverEvent>;\n    /**\n     * Fires when the cursor leaves a legend item.\n     */\n    legendItemLeave: EventEmitter<LegendItemLeaveEvent>;\n    /**\n     * Fires when the user clicks a note.\n     */\n    noteClick: EventEmitter<NoteClickEvent>;\n    /**\n     * Fires when the user hovers over a note.\n     */\n    noteHover: EventEmitter<NoteHoverEvent>;\n    /**\n     * Fires when the cursor leaves a note.\n     */\n    noteLeave: EventEmitter<NoteLeaveEvent>;\n    /**\n     * Fires when a pane is rendered because the Chart:\n     * * Is rendered.\n     * * Performs panning or zooming.\n     * * Is exported with different options.\n     * The event is used to render custom visuals in the panes.\n     */\n    paneRender: EventEmitter<PaneRenderEvent>;\n    /**\n     * Fires when the user clicks the plot area ([see example]({% slug overview_chart_charts %}#toc-events)).\n     * The `click` event is triggered by the `tap` and `contextmenu` events.\n     * To distinguish between the original events, inspect the `e.originalEvent.type` field.\n     */\n    plotAreaClick: EventEmitter<PlotAreaClickEvent>;\n    /**\n     * Fires when the user hovers the plot area ([see example]({% slug overview_chart_charts %}#toc-events)).\n     */\n    plotAreaHover: EventEmitter<PlotAreaHoverEvent>;\n    /**\n     * Fires when the cursor leaves the plot area.\n     */\n    plotAreaLeave: EventEmitter<PlotAreaLeaveEvent>;\n    /**\n     * Fires when the Chart is ready to render on screen ([see example]({% slug overview_chart_charts %}#toc-events)).\n     * For example, you can use it to remove loading indicators.\n     * Any changes made to the options are ignored.\n     */\n    render: EventEmitter<RenderEvent>;\n    /**\n     * Fires when the user modifies the selection.\n     *\n     * The range units are:\n     * - Generic axis&mdash;Category index (0-based).\n     * - Date axis&mdash;Date instance.\n     */\n    select: EventEmitter<SelectEvent>;\n    /**\n     * Fires when the user completes the modification of the selection.\n     *\n     * The range units are:\n     * - Generic axis&mdash;Category index (0-based).\n     * - Date axis&mdash;Date instance.\n     */\n    selectEnd: EventEmitter<SelectEndEvent>;\n    /**\n     * Fires when the user starts modifying the axis selection.\n     *\n     * The range units are:\n     * - Generic axis&mdash;Category index (0-based).\n     * - Date axis&mdash;Date instance.\n     */\n    selectStart: EventEmitter<SelectStartEvent>;\n    /**\n     * Fires when the user clicks the Chart series.\n     *\n     * The `click` event will be triggered by the `tap` and `contextmenu` events ([see example]({% slug overview_chart_charts %}#toc-events)).\n     * To distinguish between the original events, inspect the `e.originalEvent.type` field.\n     */\n    seriesClick: EventEmitter<SeriesClickEvent>;\n    /**\n     * Fires when the user hovers the Chart series ([see example]({% slug overview_chart_charts %}#toc-events)).\n     */\n    seriesHover: EventEmitter<SeriesHoverEvent>;\n    /**\n     * Fires when the cursor enters a series.\n     */\n    seriesOver: EventEmitter<SeriesOverEvent>;\n    /**\n     * Fires when the cursor leaves a series.\n     */\n    seriesLeave: EventEmitter<SeriesLeaveEvent>;\n    /**\n     * Fires as long as the user is zooming the Chart by using the mousewheel operation.\n     */\n    zoom: EventEmitter<ZoomEvent>;\n    /**\n     * Fires when the user stops zooming the Chart.\n     */\n    zoomEnd: EventEmitter<ZoomEndEvent>;\n    /**\n     * Fires when the user uses the mousewheel to zoom the Chart.\n     */\n    zoomStart: EventEmitter<ZoomStartEvent>;\n    instance: any;\n    constructor(configurationService: ConfigurationService);\n}\n"]}